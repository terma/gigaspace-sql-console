package com.github.terma.gigaspacesqlconsole.provider;

import com.gigaspaces.document.SpaceDocument;
import com.gigaspaces.metadata.SpaceTypeDescriptor;
import com.gigaspaces.metadata.SpaceTypeDescriptorBuilder;
import com.github.terma.gigaspacesqlconsole.core.CopyRequest;
import com.j_spaces.core.IJSpace;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openspaces.core.GigaSpace;

import static org.hamcrest.CoreMatchers.equalTo;

public class CopierTest {

    private static GigaSpace sourceGigaSpace;
    private static GigaSpace targetGigaSpace;

    @BeforeClass
    public static void init() {
        sourceGigaSpace = GigaSpaceUtils.getGigaSpace("/./source");
        targetGigaSpace = GigaSpaceUtils.getGigaSpace("/./target");
    }

    @Test
    public void shouldCopyDocumentsWithAutoGeneratedID() throws Exception {
        SpaceTypeDescriptor typeDescriptor = new SpaceTypeDescriptorBuilder("ObjectA")
                .idProperty("autoID", true).create();
        sourceGigaSpace.getTypeManager().registerTypeDescriptor(typeDescriptor);
        targetGigaSpace.getTypeManager().registerTypeDescriptor(typeDescriptor);

        SpaceDocument spaceDocument = new SpaceDocument("ObjectA");
        sourceGigaSpace.write(spaceDocument);
        System.out.println(spaceDocument);

        System.out.println(sourceGigaSpace.count(new SpaceDocument("ObjectA")));

        CopyRequest request = new CopyRequest();
        request.url = "/./source";
        request.targetUrl = "/./target";

        Copier.copy(request);

        Assert.assertThat(targetGigaSpace.count(new SpaceDocument("ObjectA")), equalTo(1));
    }

//    @Test
//    public void shouldCopyDocumentsWithNonAutoID() throws Exception {
//        SpaceTypeDescriptor typeDescriptor = new SpaceTypeDescriptorBuilder("ObjectA")
//                .idProperty("id").create();
//        sourceGigaSpace.getTypeManager().registerTypeDescriptor(typeDescriptor);
//        targetGigaSpace.getTypeManager().registerTypeDescriptor(typeDescriptor);
//
//        SpaceDocument spaceDocument = new SpaceDocument("ObjectManualID");
//        sourceGigaSpace.write(spaceDocument);
//        System.out.println(spaceDocument);
//
//        System.out.println(sourceGigaSpace.count(new SpaceDocument("ObjectA")));
//
//        CopyRequest request = new CopyRequest();
//        request.url = "/./source";
//        request.targetUrl = "/./target";
//
//        Copier.copy(request);
//
//        Assert.assertThat(targetGigaSpace.count(new SpaceDocument("ObjectA")), equalTo(1));
//    }

}
